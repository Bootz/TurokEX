#include "scripts/turokPlayer.txt"
#include "scripts/turokAmmo.txt"

////////////////////////////////////////////////////
//
// Enums
//
////////////////////////////////////////////////////

enum turokHudItemState { 
    is_none     = 0,
    is_slideIn,
    is_pause,
    is_slideOut
}

////////////////////////////////////////////////////
//
// TurokHudNumber
//
////////////////////////////////////////////////////

final class TurokHudNumber {
    kCanvasText @number;
    
    TurokHudNumber(void) {
    }
    
    void Init(const float x, const float y) {
        @number = Canvas.CreateText("fonts/turoknumbers.kfont");
        number.text = "0";
        number.x = x;
        number.y = y;
    }
    
    void Update(const int num) {
        number.text = "" + num;
    }
};

////////////////////////////////////////////////////
//
// TurokHudString
//
////////////////////////////////////////////////////

final class TurokHudString {
    kCanvasContainer @container;
    kCanvasText @top;
    kCanvasText @back;
    
    TurokHudString(void) {
    }
    
    void Init(void) {
        @container  = Canvas.CreateContainer();
        
        @top = Canvas.CreateText("fonts/turokfont.kfont");
        top.text = "";
        
        @back = Canvas.CreateText("fonts/turokfont.kfont");
        back.text = "";
        back.x = 3;
        back.y = 3;
        
        container.AddChild(top);
        container.AddChild(back);
        
        SetRGB(180, 180, 124, 77, 63, 42);
    }
    
    void SetText(const kStr str) {
        top.text = str;
        back.text = top.text;
        
        top.text.ToUpper();
        back.text.ToUpper();
    }
    
    void SetRGB(const uint8 r1, const uint8 g1, const uint8 b1,
                const uint8 r2, const uint8 g2, const uint8 b2) {
        top.SetRGB(0, r1, g1, b1);
        top.SetRGB(1, r1, g1, b1);
        top.SetRGB(2, r2, g2, b2);
        top.SetRGB(3, r2, g2, b2);
        
        back.SetRGB(0, r1>>2, g1>>2, b1>>2);
        back.SetRGB(1, r1>>2, g1>>2, b1>>2);
        back.SetRGB(2, r2>>2, g2>>2, b2>>2);
        back.SetRGB(3, r2>>2, g2>>2, b2>>2);
    }
};

////////////////////////////////////////////////////
//
// TurokSlideContainer
//
////////////////////////////////////////////////////

final class TurokSlideContainer {
    kCanvasContainer @container;
    int state;
    float slideInX;
    float slideOutX;
    float speed;
    float lerpTime;
    float pauseTime;
    
    TurokSlideContainer(void) {
        state = is_none;
        slideInX = 0;
        slideOutX = 0;
        speed = 4;
        lerpTime = 1;
        pauseTime = 0;
    }
    
    void Invoke(void) {
        state = is_slideIn;
    }
    
    void LerpOffset(void) {
        container.x = (Math::Cos((1.0f - lerpTime) * M_PI) - 1.0f) * 0.5f *
            (slideOutX - slideInX) + slideOutX;
    }
    
    void Update(void) {
        float timeDelta;
        
        if(container is null) {
            return;
        }
        
        if(state != is_none) {
            switch(state) {
                case is_slideIn:
                    timeDelta = speed * Client.GetRunTime();
                    LerpOffset();
                    lerpTime -= timeDelta;
                    if(lerpTime <= 0) {
                        container.x = slideInX;
                        state = is_pause;
                        lerpTime = 0;
                        pauseTime = 2.0f;
                    }
                    break;
                case is_pause:
                    pauseTime -= Client.GetRunTime();
                    if(pauseTime <= 0) {
                        state = is_slideOut;
                        lerpTime = 0;
                        pauseTime = 0;
                    }
                    break;
                case is_slideOut:
                    timeDelta = speed * Client.GetRunTime();
                    LerpOffset();
                    lerpTime += timeDelta;
                    if(lerpTime >= 1.0f) {
                        container.x = slideOutX;
                        state = is_none;
                        lerpTime = 1;
                    }
                    break;
                default:
                    break;
            }
        }
    }
};

////////////////////////////////////////////////////
//
// TurokHudMessage
//
////////////////////////////////////////////////////

final class TurokHudMessage {
    TurokHudString string;
    int alpha;
    float scale;
    float time;
    float curTime;
    int state;
    
    TurokHudMessage(void) {
        alpha   = 0;
        scale   = 1.0f;
        time    = 15.0f;
        curTime = 0;
        state   = 0;
    }
    
    void AddText(kStr text) {
        string.SetText(text);
        state   = 1;
        alpha   = 0;
        scale   = 1.0f;
        time    = 15.0f;
        curTime = 0;
    }
    
    void Update(void) {
        float a;
        
        switch(state) {
            case 3:
                a = 255.0f - alpha * 0.1232f;
                scale -= (Math::Sin(a) * 0.33333334f);
                if(scale < 0.02f) {
                    scale = 0.02f;
                }
                alpha -= 24;
                if(alpha - 24 <= 0) {
                    alpha = 0;
                    state = 0;
                }
                break;
            case 2:
                curTime -= (15 * Client.GetRunTime());
                scale = 1.0f;
                if(curTime <= 0) {
                    state = 3;
                }
                break;
            case 1:
                alpha += 31;
                if(alpha >= 255) {
                    curTime = time;
                    state = 2;
                    alpha = 255;
                    scale = Math::Sin(alpha * 0.00616f);
                }
                break;
            default:
                break;
        }
        
        string.top.alpha = (alpha / 255.0f);
        string.back.alpha = (alpha / 255.0f);
        //string.top.scaleX = scale;
        //string.back.scaleX = scale;
    }
};

////////////////////////////////////////////////////
//
// TurokHud
//
////////////////////////////////////////////////////

final class TurokHud {
    kCanvasImage @h_flash;
    kCanvasImage @h_plaque1;
    kCanvasImage @h_plaque2;
    kCanvasImage @h_health;
    kCanvasImage @h_turok;
    kCanvasImage @h_coin;
    kCanvasImage @h_armor;
    kCanvasImage @h_arrow1;
    kCanvasImage @h_arrow2;
    kCanvasImage @h_clip;
    kCanvasImage @h_shell1;
    kCanvasImage @h_shell2;
    kCanvasImage @h_cell;
    kCanvasImage @h_mags;
    kCanvasImage @h_grenade;
    kCanvasImage @h_rockets;
    kCanvasImage @h_fuse;
    kCanvasContainer @container;
    TurokSlideContainer lfSlider;
    
    TurokHudNumber healthNum;
    TurokHudNumber lifeForceNum;
    TurokHudNumber ammoNum;
    TurokHudNumber livesNum;
    
    array<TurokHudMessage@> messages;
    
    TurokHudMessage message1;
    TurokHudMessage message2;
    TurokHudMessage message3;
    TurokHudMessage message4;
    TurokHudMessage message5;
    TurokHudMessage message6;
    TurokHudMessage message7;
    TurokHudMessage message8;
    
    int strCounter;
    
    TurokHud(void) {
        strCounter = 0;
    }
    
    void Flash(const uint8 r, const uint8 g, const uint8 b) {
        h_flash.SetRGB(0, r, g, b);
        h_flash.SetRGB(1, r, g, b);
        h_flash.SetRGB(2, r, g, b);
        h_flash.SetRGB(3, r, g, b);
        h_flash.alpha = 0.5f;
    }
    
    void Update(void) {
        if(h_flash.alpha > 0) {
            h_flash.bVisible = true;
            h_flash.alpha -= 0.0315f;
            
            if(h_flash.alpha < 0) {
                h_flash.alpha = 0;
                h_flash.bVisible = false;
            }
        }
        
        if(lifeForceNum.number.text.Atoi() < 10) {
            lifeForceNum.number.x = -8;
        }
        else {
            lifeForceNum.number.x = -17;
        }
        
        if(localPlayer.activeWeaponID == wp_knife) {
            ammoNum.number.bVisible = false;
            h_plaque2.bVisible = false;
        }
        else {
            ammoNum.number.bVisible = true;
            h_plaque2.bVisible = true;
        }
        
        h_arrow1.bVisible = false;
        h_arrow2.bVisible = false;
        h_clip.bVisible = false;
        h_shell1.bVisible = false;
        h_shell2.bVisible = false;
        h_cell.bVisible = false;
        h_mags.bVisible = false;
        h_grenade.bVisible = false;
        h_rockets.bVisible = false;
        h_fuse.bVisible = false;
        
        switch(localPlayer.activeWeaponID) {
            case wp_bow:
                h_arrow1.bVisible = true;
                ammoNum.Update(localPlayer.arrows.amount);
                break;
            case wp_pistol:
                h_clip.bVisible = true;
                ammoNum.Update(localPlayer.clips.amount);
                break;
            case wp_shotgun:
                h_shell1.bVisible = true;
                ammoNum.Update(localPlayer.shells.amount);
                break;
            case wp_rifle:
                h_clip.bVisible = true;
                ammoNum.Update(localPlayer.clips.amount);
                break;
            case wp_pulserifle:
                h_cell.bVisible = true;
                ammoNum.Update(localPlayer.cells.amount);
                break;
            case wp_grenade_l:
                h_grenade.bVisible = true;
                ammoNum.Update(localPlayer.grenades.amount);
                break;
            default:
                break;
        }
        
        for(uint i = 0; i < messages.length(); i++) {
            messages[i].Update();
        }
        
        lfSlider.Update();
    }
    
    void Notify(kStr text) {
        messages[strCounter].AddText(text);
        strCounter = (strCounter + 1) & (messages.length() - 1);
        
        int cnt = strCounter;
        float y = 48;
        
        for(uint i = 0; i < messages.length(); i++) {
            messages[cnt].string.container.y = y;
            cnt = (cnt + 1) & (messages.length() - 1);
            y += 18;
        }
    }
    
    void Init(void) {
        @h_plaque1          = Canvas.CreateImage("hud/h_plaque1.tga");
        @h_plaque2          = Canvas.CreateImage("hud/h_plaque1.tga");
        @h_health           = Canvas.CreateImage("hud/h_health.tga");
        @h_turok            = Canvas.CreateImage("hud/h_turok.tga");
        @h_coin             = Canvas.CreateImage("hud/h_coin.tga");
        @h_armor            = Canvas.CreateImage("hud/h_armor.tga");
        @h_flash            = Canvas.CreateImage("textures/white.tga");
        @h_arrow1           = Canvas.CreateImage("hud/h_a_arrow1.tga");
        @h_arrow2           = Canvas.CreateImage("hud/h_a_arrow2.tga");
        @h_clip             = Canvas.CreateImage("hud/h_a_clip.tga");
        @h_shell1           = Canvas.CreateImage("hud/h_a_shells1.tga");
        @h_shell2           = Canvas.CreateImage("hud/h_a_shells2.tga");
        @h_cell             = Canvas.CreateImage("hud/h_a_cell.tga");
        @h_mags             = Canvas.CreateImage("hud/h_a_mags.tga");
        @h_grenade          = Canvas.CreateImage("hud/h_a_grenades.tga");
        @h_rockets          = Canvas.CreateImage("hud/h_a_missiles.tga");
        @h_fuse             = Canvas.CreateImage("hud/h_a_power.tga");
        
        @container          = Canvas.CreateContainer();
        @lfSlider.container = Canvas.CreateContainer();
        
        Canvas.AddChild(h_flash);
        Canvas.AddChild(container);
        
        h_flash.scaleX = 100;
        h_flash.scaleY = 75;
        h_flash.alpha = 0;
        h_flash.bVisible = false;
        
        healthNum.Init(36, 215);
        ammoNum.Init(102, 215);
        livesNum.Init(40, 42);
        
        h_arrow1.bVisible = false;
        h_arrow2.bVisible = false;
        h_clip.bVisible = false;
        h_shell1.bVisible = false;
        h_shell2.bVisible = false;
        h_cell.bVisible = false;
        h_mags.bVisible = false;
        h_grenade.bVisible = false;
        h_rockets.bVisible = false;
        h_fuse.bVisible = false;
        
        messages.insertLast(message1);
        messages.insertLast(message2);
        messages.insertLast(message3);
        messages.insertLast(message4);
        messages.insertLast(message5);
        messages.insertLast(message6);
        messages.insertLast(message7);
        messages.insertLast(message8);
        
        for(uint i = 0; i < messages.length(); i++) {
            messages[i].string.Init();
            messages[i].string.container.x = 160;
            messages[i].string.top.bCentered = true;
            messages[i].string.back.bCentered = true;
            container.AddChild(messages[i].string.container);
        }
        
        container.AddChild(lfSlider.container);
        lifeForceNum.Init(-8, 8);
        lfSlider.container.AddChild(lifeForceNum.number);
        lfSlider.container.AddChild(h_coin);
        lfSlider.slideInX = 286;
        lfSlider.slideOutX = 348;
        lfSlider.container.x = lfSlider.slideOutX;
        lfSlider.container.y = 10;
        
        container.AddChild(healthNum.number);
        container.AddChild(ammoNum.number);
        container.AddChild(livesNum.number);
        container.AddChild(h_plaque1);
        container.AddChild(h_arrow1);
        container.AddChild(h_arrow2);
        container.AddChild(h_clip);
        container.AddChild(h_shell1);
        container.AddChild(h_shell2);
        container.AddChild(h_cell);
        container.AddChild(h_mags);
        container.AddChild(h_grenade);
        container.AddChild(h_rockets);
        container.AddChild(h_fuse);
        container.AddChild(h_plaque2);
        container.AddChild(h_turok);
        container.AddChild(h_health);
        
        container.bVisible = false;
        
        h_plaque1.x = 32.95f;
        h_plaque1.y = 210;
        h_plaque2.x = 100;
        h_plaque2.y = 210;
        h_turok.x = 10;
        h_turok.y = 10;
        h_health.x = 12;
        h_health.y = 210;
        h_arrow1.x = 82;
        h_arrow1.y = 210;
        h_arrow2.x = 82;
        h_arrow2.y = 210;
        h_clip.x = 86;
        h_clip.y = 210;
        h_shell1.x = 79;
        h_shell1.y = 210;
        h_shell2.x = 79;
        h_shell2.y = 210;
        h_cell.x = 82;
        h_cell.y = 210;
        h_mags.x = 86;
        h_mags.y = 210;
        h_grenade.x = 79;
        h_grenade.y = 210;
        h_rockets.x = 82;
        h_rockets.y = 210;
        h_fuse.x = 82;
        h_fuse.y = 210;
    }
};
