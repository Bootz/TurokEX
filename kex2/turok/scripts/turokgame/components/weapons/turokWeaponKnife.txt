#include "scripts/turokgame/components/weapons/turokWeapon.txt"

////////////////////////////////////////////////////
//
// TurokWeaponKnife
//
////////////////////////////////////////////////////

final class TurokWeaponKnife : TurokWeapon {
    bool        bCanAttack;
    uint8       swishType;
    
    //
    // TurokWeaponKnife::TurokWeaponKnife
    //
    
    TurokWeaponKnife(kActor @actor) {
        super(actor);
        
        bCanAttack = false;
        bOwned = true;
        bActive = true;
        
        self.bHidden = false;
    }
    
    ~TurokWeaponKnife() {
    }
    
    //
    // TurokWeaponKnife::OnAttack
    //
    
    bool OnAttack(void) {
        kActor @src = localClient.Puppet();
        
        if(bUnderWater) {
            self.AnimState().Blend(anim_weaponAttackUnderwater, playSpeed, 8.0f, 0);
            src.StartSound("sounds/shaders/underwater_swim_2.ksnd");
        }
        else {
            int rnd = Math::RandMax(100);
            
            if(rnd <= 32) {
                swishType = 0;
                self.AnimState().Blend(anim_weaponAttack1, playSpeed, 4.0f, 0);
                src.StartSound("sounds/shaders/knife_swish_2.ksnd");
            }
            else if(rnd <= 64) {
                swishType = 1;
                self.AnimState().Blend(anim_weaponAttack2, playSpeed, 4.0f, 0);
                src.StartSound("sounds/shaders/knife_swish_1.ksnd");
            }
            else {
                swishType = 2;
                self.AnimState().Blend(anim_weaponAttack3, playSpeed, 4.0f, 0);
                src.StartSound("sounds/shaders/knife_swish_3.ksnd");
            }
        }
        
        bCanAttack = true;
        return true;
    }
    
    //
    // TurokWeaponKnife::KnifeBloodSplatter
    //
    
    void KnifeBloodSplatter(const int which, kVec3 &in pos) {
        kActor @src = owner.self.Puppet();
        kQuat rot   = src.GetRotation();
        kVec3 org   = src.GetOrigin();
        kStr fxName;
        
        switch(which) {
            case 0:
                fxName = "fx/fx_060.kfx";
                break;
            case 1:
                fxName = "fx/fx_063.kfx";
                break;
            case 2:
                fxName = "fx/fx_066.kfx";
                break;
            default:
                return;
        }
        
        LocalWorld.SpawnFX(fxName, src, kVec3(0, 0, 0), org + (pos * rot), rot);
    }
    
    //
    // TurokWeaponKnife::knifeAttack1
    //
    
    void knifeAttack1(const float a, const float b, const float c, const float d) {
        kActor @player = owner.self.Puppet();
        kVec3 pos = player.TransformPoint(a, b, -c);
        
        if(player.RangeDamage("defs/damage.def@knifeDamage_1", player.radius, pos)) {
            KnifeBloodSplatter(0, kVec3(a, b, -c));
        }
    }
    
    //
    // TurokWeaponKnife::knifeAttack2
    //
    
    void knifeAttack2(const float a, const float b, const float c, const float d) {
        kActor @player = owner.self.Puppet();
        kVec3 pos = player.TransformPoint(a, b, -c);
        
        if(player.RangeDamage("defs/damage.def@knifeDamage_2", player.radius, pos)) {
            KnifeBloodSplatter(1, kVec3(a, b, -c));
        }
    }
    
    //
    // TurokWeaponKnife::knifeAttack3
    //
    
    void knifeAttack3(const float a, const float b, const float c, const float d) {
        kActor @player = owner.self.Puppet();
        kVec3 pos = player.TransformPoint(a, b, -c);
        
        if(player.RangeDamage("defs/damage.def@knifeDamage_3", player.radius, pos)) {
            KnifeBloodSplatter(2, kVec3(a, b, -c));
        }
    }
    
    //
    // TurokWeaponKnife::CheckAttack
    //
    
    void CheckAttack(void) {
        if(bCanAttack && self.AnimState().PlayTime() >= 0.15f) {
            bCanAttack = false;
        }
        
        TurokWeapon::CheckAttack();
    }
    
    //
    // TurokWeaponKnife::OnSpawn
    //
    
    void OnSpawn(void) {
        xOffset = 170.667f;
        yOffset = -9.21548f;
        zOffset = -153.6f;
        waterIdleAnim = anim_weaponIdleUnderwater;
        self.SetModel("models/mdl653/mdl653.kmesh");
        
        TurokWeapon::OnSpawn();
    }
};
