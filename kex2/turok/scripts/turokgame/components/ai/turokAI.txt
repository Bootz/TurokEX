////////////////////////////////////////////////////
//
// Enums
//
////////////////////////////////////////////////////

enum pickupDropFlags {
    pdf_unknown1    = 0,
    pdf_unknown2,
    pdf_health_full,
    pdf_unknown4,
    pdf_health_small,
    pdf_health_medium
}

const array<int> g_MeleeAnims = {
    anim_aiMelee1,
    anim_aiMelee2,
    anim_aiMelee3,
    anim_aiMelee4,
    anim_aiMelee5,
    anim_aiMelee6,
    anim_aiMelee7,
    anim_aiMelee8
};

const array<int> g_MeleeAnimWeights = {
    10, 10, 10, 8, 8, 8, 6, 6
};

////////////////////////////////////////////////////
//
// TurokAI
//
////////////////////////////////////////////////////

class TurokAI : Component {
    kActor @self;
    kAI @ai;
    int alligenceID;
    int dropItemFlags;
    bool bDeathFade;
    bool bWalkAround;
    float deathFadeTime;
    float baseYawSpeed;
    float wanderThreshold;
    int knifeDamage;
    int backStabDamage;
    
    //
    // TurokAI::TurokAI
    //
    
    TurokAI(kActor @actor) {
        @self = actor;
        @ai = self.ToAI();
        
        alligenceID = -1;
        dropItemFlags = 0;
        bDeathFade = false;
        deathFadeTime = 0.0f;
        baseYawSpeed = 2.0f;
        wanderThreshold = 0.0f;
        bWalkAround = false;
        knifeDamage = 15;
        backStabDamage = 30;
    }
    
    //
    // TurokAI::PickAnimSet
    //
    
    void PickAnimSet(const array<int> &anims, const array<int> &weights) {
        if(anims.length() != weights.length()) {
            return;
        }
        
        int randomSum = 0;
        uint i;
        int count = 0;
        array<int>rndArray;
        array<int>animArray;
        
        for(i = 0; i < weights.length(); i++) {
            if(self.AnimState().CheckAnimID(anims[i])) {
                rndArray.insertLast(randomSum);
                animArray.insertLast(anims[i]);
                randomSum += weights[i];
                count++;
            }
        }
        
        if(randomSum == 0 || count == 0) {
            return;
        }
        
        int r = Math::RandMax(randomSum);
        
        for(i = count-1; i >= 0; i--) {
            if(rndArray[i] <= r) {
                break;
            }
        }
        
        self.AnimState().Blend(animArray[i], 4.0f, 8.0f, ANF_ROOTMOTION);
    }
    
    //
    // TurokAI::DropPickup
    //
    
    void DropPickup(const float x, const float y, const float z, const kStr itemName) {
        kVec3 origin = self.TransformPoint(x, y, -z);
        origin.y += 8.192f;
        
        kActor @actor = LocalWorld.SpawnActor(itemName, origin, self.GetAngles());
        
        actor.bCollision = false;
        
        actor.Physics().bEnabled = true;
        actor.Physics().friction = 0.5f;
        actor.Physics().bounceDamp = 0.35f;
        actor.Physics().airFriction = 0.0f;
        actor.Physics().fallFriction = 0.0f;
        
        kVec3 velocity(0.0f, 1.0f, 0.0f);
        kVec3 rVector(Math::RandCFloat(),
                      Math::RandCFloat(),
                      Math::RandCFloat());
                      
        velocity.Lerp(rVector, 0.25f);
        actor.Physics().GetVelocity() = velocity.Normalize() * 409.6f;
    }
    
    //
    // TurokAI::CheckDropPickupFlags
    //
    
    const bool CheckDropPickupFlags(const int flag) {
        return (dropItemFlags & (1 << flag)) != 0;
    }
    
    //
    // TurokAI::spawnItem
    //
    
    void spawnItem(const float x, const float y, const float z, const float w) {
        if(CheckDropPickupFlags(pdf_health_small)) {
            DropPickup(x, y, z, "defs/actors.def@Item_Health_Small");
        }
    }
    
    //
    // TurokAI::swooshSound
    //
    
    void swooshSound(const float a, const float b, const float c, const float d) {
        self.StartSound("sounds/shaders/knife_swish_1.ksnd");
    }
    
    //
    // TurokAI::action_103
    //
    
    void action_103(const float x, const float y, const float z, const float w) {
        float threshold = w;
        
        if(threshold < 1.0f) {
            threshold = 1.0f;
        }
        
        kVec3 pos = self.TransformPoint(x, y + self.viewHeight, -z);
        kVec3 velocity = self.Physics().GetVelocity();
        kVec3 sVec = pos - (velocity * 0.06666667f);
        kQuat rot = velocity.ToQuaternion();
        float cnt = 0;
        kVec3 lVec;
        
        do {
            lVec = pos;
            lVec.Lerp(sVec, cnt / threshold);
            LocalWorld.SpawnFX("fx/fx_051.kfx", self, velocity, lVec, rot);
            cnt += 1.0f;
        } while(cnt < threshold);
    }
    
    //
    // TurokAI::OnStateChange
    //
    
    void OnStateChange(int state) {
        switch(state) {
            case AIS_IDLE:
                self.AnimState().Blend(anim_aiStanding, 4.0f, 8.0f, ANF_LOOP);
                ai.bAnimTurning = false;
                break;
                
            case AIS_CALM:
                if(ai.bAnimTurning == true) {
                    if(ShouldKeepTurning()) {
                        break;
                    }
                    else {
                        ai.bAnimTurning = false;
                    }
                }
                self.AnimState().Blend(anim_aiWalking, 4.0f, 8.0f, ANF_ROOTMOTION|ANF_LOOP);
                bWalkAround = false;
                wanderThreshold = 0.0f;
                break;
                
            case AIS_ALERT:
                if(ai.bAnimTurning == true) {
                    if(ShouldKeepTurning()) {
                        break;
                    }
                    else {
                        ai.bAnimTurning = false;
                    }
                }
                self.AnimState().Blend(anim_aiRunning, 4.0f, 8.0f, ANF_ROOTMOTION|ANF_LOOP);
                bWalkAround = false;
                wanderThreshold = 0.0f;
                break;
                
            case AIS_ATTACK_MELEE:
                PickAnimSet(g_MeleeAnims, g_MeleeAnimWeights);
                ai.bAnimTurning = false;
                break;
                
            case AIS_ATTACK_RANGE:
                ai.SetIdealYaw(self.GetAngles().yaw + ai.GetYawToTarget(), 4.096f);
                self.AnimState().Blend(anim_aiRangeAttack2, 4.0f, 8.0f, ANF_ROOTMOTION);
                ai.bAnimTurning = false;
                break;
        }
    }
    
    //
    // TurokAI::TweenLeftTurn
    //
    
    void TweenLeftTurn(void) {
        int animID = self.AnimState().PlayingID();
        int animIDToPlay = -1;
        
        switch(animID) {
            case anim_aiStanding:
                animIDToPlay = anim_aiTurn_L_Stand;
                break;
                
            case anim_aiWalking:
                animIDToPlay = anim_aiTurn_L_Walk;
                break;
                
            case anim_aiRunning:
                animIDToPlay = anim_aiTurn_L_Run;
                break;
                
            default:
                break;
        }
        
        if(animIDToPlay == -1) {
            switch(ai.GetAIState()) {
                case AIS_IDLE:
                    animIDToPlay = anim_aiTurn_L_Stand;
                    break;
                    
                case AIS_CALM:
                    animIDToPlay = anim_aiTurn_L_Walk;
                    break;
                    
                case AIS_ALERT:
                    animIDToPlay = anim_aiTurn_L_Run;
                    break;
                    
                default:
                    return;
            }
        }
        
        self.AnimState().Blend(animIDToPlay, 4.0f, 8.0f, ANF_ROOTMOTION);
        ai.bAnimTurning = true;
    }
    
    //
    // TurokAI::TweenRightTurn
    //
    
    void TweenRightTurn(void) {
        int animID = self.AnimState().PlayingID();
        int animIDToPlay = -1;
        
        switch(animID) {
            case anim_aiStanding:
                animIDToPlay = anim_aiTurn_R_Stand;
                break;
                
            case anim_aiWalking:
                animIDToPlay = anim_aiTurn_R_Walk;
                break;
                
            case anim_aiRunning:
                animIDToPlay = anim_aiTurn_R_Run;
                break;
                
            default:
                break;
        }
        
        if(animIDToPlay == -1) {
            switch(ai.GetAIState()) {
                case AIS_IDLE:
                    animIDToPlay = anim_aiTurn_R_Stand;
                    break;
                    
                case AIS_CALM:
                    animIDToPlay = anim_aiTurn_R_Walk;
                    break;
                    
                case AIS_ALERT:
                    animIDToPlay = anim_aiTurn_R_Run;
                    break;
                    
                default:
                    return;
            }
        }
        
        self.AnimState().Blend(animIDToPlay, 4.0f, 8.0f, ANF_ROOTMOTION);
        ai.bAnimTurning = true;
    }
    
    //
    // TurokAI::TweenBackTurn
    //
    
    void TweenBackTurn(void) {
        int animID = self.AnimState().PlayingID();
        int animIDToPlay = -1;
        
        switch(animID) {
            case anim_aiStanding:
                animIDToPlay = anim_aiTurn_B_Stand;
                break;
                
            case anim_aiWalking:
                animIDToPlay = anim_aiTurn_B_Walk;
                break;
                
            case anim_aiRunning:
                animIDToPlay = anim_aiTurn_B_Run;
                break;
                
            default:
                break;
        }
        
        if(animIDToPlay == -1) {
            switch(ai.GetAIState()) {
                case AIS_IDLE:
                    animIDToPlay = anim_aiTurn_B_Stand;
                    break;
                    
                case AIS_CALM:
                    animIDToPlay = anim_aiTurn_B_Walk;
                    break;
                    
                case AIS_ALERT:
                    animIDToPlay = anim_aiTurn_B_Run;
                    break;
                    
                default:
                    return;
            }
        }
        
        self.AnimState().Blend(animIDToPlay, 4.0f, 8.0f, ANF_ROOTMOTION);
        ai.bAnimTurning = true;
    }
    
    //
    // TurokAI::TweenFrontTurn
    //
    
    void TweenFrontTurn(const float angle) {
        switch(ai.GetAIState()) {
            case AIS_IDLE:
                self.AnimState().Blend(anim_aiStanding, 4.0f, 8.0f, ANF_ROOTMOTION|ANF_LOOP);
                break;
                
            case AIS_CALM:
            case AIS_ALERT:
                {
                    const float an4 = DegToRad(4.0f);
                    float time = 0;
                    
                    if(!(angle <= an4 && angle >= -an4)) {
                        kActor @targ = self.GetTarget();
                        if(!(targ is null)) {
                            float dist = self.GetOrigin().Distance(targ.GetOrigin()) / 384.0f;
                            time = 1.7f - dist * 0.7f;
                        }
                    }
                    
                    if(time < 0) {
                        time = 0;
                    }
                    
                    ai.yawSpeed = baseYawSpeed + time;
                    
                    if(ai.GetAIState() == AIS_CALM) {
                        self.AnimState().Blend(anim_aiWalking, 4.0f, 8.0f, ANF_ROOTMOTION|ANF_LOOP);
                    }
                    else {
                        self.AnimState().Blend(anim_aiRunning, 4.0f, 8.0f, ANF_ROOTMOTION|ANF_LOOP);
                        self.AnimState().frameTime = 4.0f - time;
                    }
                }
                break;
                
            default:
                return;
        }
    }
    
    //
    // TurokAI::ShouldKeepTurning
    //
    
    bool ShouldKeepTurning(void) {
        const int state = ai.GetAIState();
        
        if(state != AIS_CALM && state != AIS_ALERT) {
            return false;
        }
        
        const float angle = ai.GetYawToTarget();
        const float an45 = DegToRad(50.0f);
        
        if(angle > an45 || angle < -an45) {
            ai.aiFlags &= ~AIF_TURNING;
            
            if(angle < 0) {
                TweenLeftTurn();
                return true;
            }
            else {
                TweenRightTurn();
                return true;
            }
        }
        
        return false;
    }
    
    //
    // TurokAI::PlayingTurnAnimation
    //
    
    bool PlayingTurnAnimation(void) {
        return (self.AnimState().IsPlaying(anim_aiTurn_L_Stand) ||
                self.AnimState().IsPlaying(anim_aiTurn_R_Stand) ||
                self.AnimState().IsPlaying(anim_aiTurn_B_Stand) ||
                self.AnimState().IsPlaying(anim_aiTurn_L_Walk)  ||
                self.AnimState().IsPlaying(anim_aiTurn_R_Walk)  ||
                self.AnimState().IsPlaying(anim_aiTurn_B_Walk)  ||
                self.AnimState().IsPlaying(anim_aiTurn_L_Run)   ||
                self.AnimState().IsPlaying(anim_aiTurn_R_Run)   ||
                self.AnimState().IsPlaying(anim_aiTurn_B_Run));
    }
    
    //
    // TurokAI::OnTurn
    //
    
    bool OnTurn(const float angle) {
        const float an45 = DegToRad(50.0f);
        const float an150 = DegToRad(150.0f);

        if(PlayingTurnAnimation()) {
            return false;
        }
        
        if((self.AnimState().flags & ANF_BLEND) != 0) {
            return false;
        }

        if(angle > an150 || angle < -an150) {
            ai.aiFlags &= ~AIF_TURNING;
            
            TweenBackTurn();
            return false;
        }
        else if(angle > an45 || angle < -an45) {
            ai.aiFlags &= ~AIF_TURNING;
            
            if(angle < 0) {
                TweenLeftTurn();
                return false;
            }
            else {
                TweenRightTurn();
                return false;
            }
        }
        else {
            if((ai.aiFlags & AIF_SEETARGET != 0)) {
                TweenFrontTurn(angle);
            }
            else if(ai.bAnimTurning == false) {
                OnStateChange(ai.GetAIState());
            }
        }
        
        return true;
    }
    
    //
    // TurokAI::BumpAndTurn
    //
    
    void BumpAndTurn(const float spread, const float angle) {
        float selfYaw = self.GetAngles().yaw;
                
        if(!ai.CheckPosition(self.GetOrigin(), ai.checkRadius, selfYaw + spread)) {
            ai.SetIdealYaw(selfYaw - angle, 4.096f);
        }
        else if(!ai.CheckPosition(self.GetOrigin(), ai.checkRadius, selfYaw - spread)) {
            ai.SetIdealYaw(selfYaw + angle, 4.096f);
        }
    }
    
    //
    // TurokAI::DeathThink
    //
    
    void DeathThink(void) {
        if(bDeathFade == false) {
            if((self.AnimState().flags & ANF_STOPPED) != 0) {
                deathFadeTime = 10.0f;
                bDeathFade = true;
            }
        }
        else if(deathFadeTime > 0.0f) {
            float rt = Client.GetRunTime();
            deathFadeTime -= rt;
            
            if(deathFadeTime <= 5.0f) {
                float scaleXZ = (1.0f - ((deathFadeTime / 5.0f) * -0.5f)) * (rt * 1.5f);
                float scaleY = (1.0f - ((deathFadeTime / 5.0f))) * (rt * 1.5f);
                
                self.GetScale().x += (scaleXZ * scaleXZ);
                self.GetScale().y += (scaleY * scaleY);
                self.GetScale().z += (scaleXZ * scaleXZ);
                
                self.UpdateTransform();
                self.SetShaderParam(0, 1.0f - (deathFadeTime / 5.0f));
            }
        }
        else {
            self.bHidden = true;
            self.Remove();
        }
    }
    
    //
    // TurokAI::WanderThink
    //
    
    void WanderThink(void) {
        if((ai.aiFlags & AIF_FINDTARGET) != 0) {
            if(bWalkAround == true) {
                if((ai.aiFlags & AIF_TURNING) == 0) {
                    BumpAndTurn(0.5236f, 0.78f);
                }
            }
            if(!PlayingTurnAnimation() && ai.nextThinkTime > wanderThreshold) {
                if(Math::RandFloat() > 0.9f) {
                    bWalkAround = true;
                    self.AnimState().Blend(anim_aiWalking, 4.0f, 8.0f, ANF_ROOTMOTION|ANF_LOOP);
                    wanderThreshold = ai.nextThinkTime + (Math::RandFloat() * 4000.0f);
                }
                else {
                    if(bWalkAround == true) {
                        self.AnimState().Blend(anim_aiStanding, 4.0f, 8.0f, ANF_LOOP);
                        bWalkAround = false;
                    }
                    ai.TurnYaw(0.872f + (2.26f * Math::RandFloat()));
                    wanderThreshold = ai.nextThinkTime + (Math::RandFloat() * 2000.0f);
                }
            }
        }
    }
    
    //
    // TurokAI::OnDeath
    //
    
    void OnDeath(kActor@ killer, kKeyMapMem @damageDef) {
        if(ai.aiState == AIS_DEATH || (ai.aiFlags & AIF_DISABLED) != 0) {
            return;
        }
        
        const array<int> anims = {
            anim_aiDeathStand,
            anim_aiDeathViolent,
            anim_aiDeathRunning
        };
        
        const array<int> weights = {
            18, 3, 8
        };
        
        self.Physics().GetVelocity().Clear();
        
        PickAnimSet(anims, weights);
        ai.aiFlags |= AIF_DISABLED;
        ai.aiState = AIS_DEATH;
    }
    
    //
    // TurokAI::OnDormant
    //
    
    void OnDormant(void) {
        self.AnimState().Blend(anim_aiStanding, 4.0f, 4.0f, ANF_LOOP);
        ai.ClearTargets();
    }
    
    //
    // TurokAI::OnWake
    //
    
    void OnWake(void) {
        ai.ClearTargets();
    }
    
    //
    // TurokAI::OnLocalThink
    //
    
    void OnLocalThink(void) {
        if(ai.GetAIState() == AIS_DEATH) {
            DeathThink();
        }
        else if(ai.GetAIState() == AIS_IDLE && (ai.aiFlags & AIF_SEETARGET) == 0) {
            WanderThink();
        }
    }
    
    //
    // TurokAI::KnifeDamage
    //
    
    void KnifeDamage(kActor @inflictor, kKeyMapMem @damageDef) {
        float an1;
        float an2;
        
        an1 = RadToDeg(self.GetAngles().yaw) % 360.0f;
        an2 = RadToDeg(inflictor.GetAngles().yaw) % 360.0f;
        
        if(Math::Fabs(an1 - an2) > 40.0f) {
            self.health -= knifeDamage;
        }
        else {
            self.health -= backStabDamage;
        }
    }
    
    //
    // TurokAI::OnDamage
    //
    
    void OnDamage(kActor @inflictor, int damage, kKeyMapMem @damageDef) {
        bool bKnife = false;
        
        damageDef.GetBool("bKnife", bKnife, false);
        
        if(bKnife) {
            KnifeDamage(inflictor, damageDef);
        }
    }
    
    //
    // TurokAI::OnThink
    //
    
    void OnThink(void) {
    }
    
    //
    // TurokAI::OnSpawn
    //
    
    void OnSpawn(void) {
        int dropFlags1 = 0;
        int dropFlags2 = 0;
        
        if(!(self.def is null)) {
            self.def.GetInt("alligenceID", alligenceID);
            self.def.GetInt("dropItemFlags", dropFlags1);
            self.def.GetInt("knifeDamage", knifeDamage);
            self.def.GetInt("backStabDamage", backStabDamage);
            self.def.GetFloat("ai.yawSpeed", baseYawSpeed);
        }
        
        self.args.GetInt("dropItemFlags", dropFlags2);
        
        dropItemFlags |= (dropFlags1 | dropFlags2);
    }
    
    //
    // TurokAI::OnTouch
    //
    
    bool OnTouch(kActor @instigator) {
        return true;
    }
    
    //
    // TurokAI::OnTrigger
    //
    
    void OnTrigger(void) {
    }
}
