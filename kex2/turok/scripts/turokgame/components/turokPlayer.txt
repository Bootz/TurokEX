////////////////////////////////////////////////////
//
// Constants
//
////////////////////////////////////////////////////

const float ANGLE_MAXPITCH              = DegToRad(90.0f);

const float VELOCITY_JUMP               = 632;

const float FALL_STOPSPEED              = -460.8f;
const float FALL_THUMPFACTOR            = -768;

const float VIEWBOB_EPISILON            = 0.001f;
const float VIEWBOB_MAXSWAY             = DegToRad(22.5f);
const float VIEWBOB_FREQX               = 0.02f;
const float VIEWBOB_FREQY               = 0.01f;
const float VIEWBOB_ANGLE               = 0.0218f;
const float VIEWBOB_GROUNDHEIGHT        = 2.048f;
const float VIEWBOB_SWIMFREQX           = 0.00200f;
const float VIEWBOB_SWIMFREQY           = 0.00125f;
const float VIEWBOB_SWIMANGLE           = 0.025f;
const float VIEWBOB_PITCHJUMP           = DegToRad(14.32f);

const float SQUAT_LAND_TIME             = 0.032f;

const float SWIM_STRAFEROLL_ANGLE       = 0.33f;
const float SWIM_STRAFEROLL_SPEED       = 0.05f;

const float WALK_STRAFEROLL_ANGLE       = 0.0835f;
const float WALK_STRAFEROLL_SPEED       = 0.1f;

const float CLIMB_STRAFEROLL_ANGLE      = 0.33f;
const float CLIMB_STRAFEROLL_SPEED      = 0.0256f;

const float PHYSICS_PLAYER_MASS         = 1843.2f;
const float PHYSICS_PLAYER_STEPHEIGHT   = 36;
const float PHYSICS_PLAYER_AIR_FRICTION = 0;

const float SWIM_THRUST_SPEED           = 480;
const float SWIM_THRUST_TIME            = 0.63f;
const float SWIM_THRUST_THRESHOLD       = (SWIM_THRUST_TIME - 0.05f);

const float CLIMB_LERP_SPEED            = 176;
const float CLIMB_THRUST_TIME           = 0.75f;
const float CLIMB_THRUST_THRESHOLD      = (CLIMB_THRUST_TIME - 0.62f);

const int   TUROK_MAX_LIFEFORCES        = 100;
const int   TUROK_MAX_LIVES             = 9;
const int   TUROK_HEALTH_MAX            = 250;
const int   TUROK_MORTAL_WOUND_MAX      = 120;

////////////////////////////////////////////////////
//
// Enums
//
////////////////////////////////////////////////////

enum turokWeapons_e {
    wp_none = -1,
    wp_knife,
    wp_bow,
    wp_pistol,
    wp_shotgun,
    wp_autoshotgun,
    wp_rifle,
    wp_pulserifle,
    wp_minigun,
    wp_grenade_l,
    wp_alienrifle,
    wp_rocket_l,
    wp_accelerator,
    wp_fusioncannon,
    wp_chronoscepter,
    wp_numweapons
}

enum turokAmmo_e {
    am_none = 0,
    am_arrow,
    am_tekarrow,
    am_clip,
    am_shell,
    am_expshell,
    am_cell,
    am_mag,
    am_grenade,
    am_rocket,
    am_fuse,
    am_numammo
} 

////////////////////////////////////////////////////
//
// Vars
//
////////////////////////////////////////////////////

kLocalPlayer @localClient;
TurokPlayer @localPlayer;

////////////////////////////////////////////////////
//
// Global Functions
//
////////////////////////////////////////////////////

void CommandFly(void) {
    TurokPlayer @player = cast<TurokPlayer@>(localClient.obj);
    
    if(player.bFly == false) {
        player.bFly = true;
        localClient.Puppet().Physics().airFriction = 1;
        localClient.Puppet().Physics().mass = 0;
    }
    else {
        player.bFly = false;
        localClient.Puppet().Physics().airFriction = PHYSICS_PLAYER_AIR_FRICTION;
        localClient.Puppet().Physics().mass = PHYSICS_PLAYER_MASS;
    }
    
    Com.Print("Fly mode = " + player.bFly);
}

void CommandToggleFarZ(void) {
    TurokPlayer @player = cast<TurokPlayer@>(localClient.obj);
    
    if(player.bToggleFarZ == false) {
        player.bToggleFarZ = true;
        LocalWorld.Camera().zFar = -1;
    }
    else {
        player.bToggleFarZ = false;
        LocalWorld.Camera().zFar = LocalWorld.GetFogFar();
    }
}

void CommandToggleCamera(void) {
    localPlayer.ToggleCamera();
    localClient.Unlock();
}

////////////////////////////////////////////////////
//
// TurokPlayer
//
////////////////////////////////////////////////////

final class TurokPlayer : Component {
    kLocalPlayer        @self;
    
    //
    // weapon info
    //
    TurokWeapon         @activeWeapon;
    int                 activeWeaponID;
    int                 pendingWeaponID;
    
    //
    // warp info
    //
    kVec3               warpPosition;
    float               warpYaw;
    int                 warpSectorID;
    bool                bWarping;
    bool                bDidWarped;
    
    //
    // debugging
    //
    bool                bFly;
    bool                bToggleFarZ;
    
    //
    // camera
    //
    bool                bCameraAttached;
    kVec3               camOffset;
    float               camHeight;
    
    //
    // local variables
    //
    bool                bJumped;
    bool                bLerpToWaterSurface;
    float               fallAmount;
    int                 waterLevel;
    int                 bubbleTime;
    bool                bThrusting;
    float               thrustTime;
    bool                bClimbing;
    bool                bClimbRoll;
    bool                bClimbDone;
    float               jumpPitch;
    float               squatTime;
    float               recoilPitch;
    
    //
    // game variables
    //
    int                 lives;
    int                 lifeForces;
    int                 armor;
    int                 mortalWound;
    bool                bHasArmor;
    bool                bHasBackpack;
    float               spiritTime;
    
    //
    // weapons
    //
    array<kActor@>      weapons(wp_numweapons);
    
    //
    // ammo
    //
    TurokAmmoArrow      arrows;
    TurokAmmoTekArrow   tekArrows;
    TurokAmmoClip       clips;
    TurokAmmoShell      shells;
    TurokAmmoExpShell   expShells;
    TurokAmmoCell       cells;
    TurokAmmoGrenade    grenades;
    TurokAmmoMags       ammoMags;
    TurokAmmoRocket     rockets;
    TurokAmmoFuseCharge fuses;
    
    //
    // TurokPlayer::TurokPlayer
    //
    
    TurokPlayer(kActor @actor) {
        @self               = cast<kLocalPlayer@>(actor);
        @localClient        = self;
        @activeWeapon       = null;
        activeWeaponID      = wp_none;
        pendingWeaponID     = -1;
        bFly                = false;
        bJumped             = false;
        bToggleFarZ         = false;
        fallAmount          = 0.0f;
        bCameraAttached     = false;
        waterLevel          = WLT_INVALID;
        bLerpToWaterSurface = false;
        bubbleTime          = 0;
        bThrusting          = false;
        thrustTime          = 0;
        bWarping            = false;
        bDidWarped          = false;
        bClimbRoll          = false;
        bClimbDone          = false;
    }
    
    //
    // TurokPlayer::~TurokPlayer
    //
    
    ~TurokPlayer() {
        @activeWeapon = null;
    }
    
    //
    // TurokPlayer::ResetVars
    //
    
    void ResetVars(void) {
        lives           = 2;
        lifeForces      = 0;
        armor           = 0;
        mortalWound     = 100;
        bHasArmor       = false;
        bHasBackpack    = false;
        spiritTime      = 0.0f;
    }
    
    //
    // TurokPlayer::SetupCamera
    //
    
    void SetupCamera(void) {
        kCamera @camera = LocalWorld.Camera();
        kActor @puppet = self.Puppet();
        
        camHeight = puppet.viewHeight + 20.48f;
        
        camOffset.x = 0;
        camOffset.y = camHeight;
        camOffset.z = 0;
        
        camera.Attachment().AttachToActor(puppet);
        camera.Attachment().SetAttachOffset(camOffset);
        camera.Attachment().SetSourceOffset(camOffset);
        camera.Attachment().bAttachRelativeAngles = true;
        
        bCameraAttached = true;
        
        camera.zFar = LocalWorld.GetFogFar();
        camera.bClampZFarToFog = true;
    }
    
    //
    // TurokPlayer::ToggleCamera
    //
    
    void ToggleCamera(void) {
        kCamera @camera = LocalWorld.Camera();
        kActor @puppet = self.Puppet();
        
        if(!(camera.Attachment().GetAttachedActor() is null)) {
            camera.Attachment().DettachActor();
            puppet.bHidden = false;
            bCameraAttached = false;
            playerHud.container.bVisible = false;
        }
        else {
            camera.Attachment().AttachToActor(puppet);
            puppet.bHidden = true;
            bCameraAttached = true;
            playerHud.container.bVisible = true;
        }
        
        for(int i = 0; i < wp_numweapons; i++) {
            if(bCameraAttached) {
                weapons[i].displayType = ODT_CLIENTVIEW;
            }
            else {
                weapons[i].displayType = ODT_NORMAL;
            }
        }
    }

    //
    // TurokPlayer::GetWeaponObj
    //
    
    TurokWeapon @GetWeaponObj(int weapon) {
        if(weapon >= 0 && weapon < wp_numweapons) {
            return cast<TurokWeapon@>(weapons[weapon].obj);
        }
        
        return null;
    }
    
    //
    // TurokPlayer::SetWeapon
    //
    
    void SetWeapon(void) {
        if(pendingWeaponID == -1) {
            return;
        }
        
        @activeWeapon = GetWeaponObj(pendingWeaponID);
        
        if(activeWeapon is null) {
            return;
        }
        
        activeWeapon.ChangeIn();
        
        activeWeaponID  = pendingWeaponID;
        pendingWeaponID = -1;
    }
    
    //
    // TurokPlayer::SetupWeapons
    //
    
    void SetupWeapons(void) {
        int i;
        kVec3 origin        = kVec3(0, -4096, 0);
        kAngle angle        = kAngle(0, 0, 0);
        TurokPlayer @player = cast<TurokPlayer@>(self.obj);
 
        array<kStr> weaponComponents = {
            "TurokWeaponKnife",
            "TurokWeaponBow",
            "TurokWeaponPistol",
            "TurokWeaponShotgun",
            "TurokWeaponAutoShotgun",
            "TurokWeaponRifle",
            "TurokWeaponPulseRifle",
            "TurokWeaponGrenade",
            "TurokWeaponMiniGun",
            "TurokWeaponAlienRifle",
            "TurokWeaponRocketLauncher",
            "TurokWeaponAccelerator",
            "TurokWeaponFusionCannon",
            "TurokWeaponChronoScepter"
        };
        
        for(int i = 0; i < wp_numweapons; i++) {
            @weapons[i] = LocalWorld.SpawnActor("kexActor", weaponComponents[i], origin, angle);
            
            if(!(weapons[i] is null)) {
                @cast<TurokWeapon@>(weapons[i].obj).owner = player;
            }
        }

        pendingWeaponID = wp_knife;
        SetWeapon();
    }
    
    //
    // TurokPlayer::CheckWeaponChange
    //
    
    bool CheckWeaponChange(void) {
        if(self.ActionDown('+nextweap') &&
            self.ActionHeldTime('+nextweap') == 0) {
            NextWeapon();
            return true;
        }
        else if(self.ActionDown('+prevweap') &&
            self.ActionHeldTime('+prevweap') == 0) {
            PrevWeapon();
            return true;
        }
        
        return false;
    }
    
    //
    // TurokPlayer::NextWeapon
    //
    
    void NextWeapon(void) {
        int nextWpn;
        TurokWeapon @weapon;

        if(pendingWeaponID != -1) {
            nextWpn = pendingWeaponID + 1;
        }
        else {
            nextWpn = activeWeaponID + 1;
        }
            
        if(nextWpn >= wp_numweapons) {
            nextWpn = 0;
        }
            
        while(nextWpn != activeWeaponID) {
            @weapon = GetWeaponObj(nextWpn);
        
            if(!(weapon is null)) {
                if(weapon.bOwned) {
                    if(pendingWeaponID != -1) {
                        pendingWeaponID = nextWpn;
                        return;
                    }
                    
                    if(weapon.bOwned) {
                        activeWeapon.ChangeOut();
                    }
                    pendingWeaponID = nextWpn;
                    break;
                }
            }
            
            if(++nextWpn >= wp_numweapons) {
                nextWpn = 0;
            }
        }
    }
    
    //
    // TurokPlayer::PrevWeapon
    //
    
    void PrevWeapon(void) {
        int nextWpn;
        TurokWeapon @weapon;

        if(pendingWeaponID != -1) {
            nextWpn = pendingWeaponID - 1;
        }
        else {
            nextWpn = activeWeaponID - 1;
        }
            
        if(nextWpn < 0) {
            nextWpn = wp_numweapons - 1;
        }
            
        while(nextWpn != activeWeaponID) {
            @weapon = GetWeaponObj(nextWpn);
        
            if(!(weapon is null)) {
                if(weapon.bOwned) {
                    if(pendingWeaponID != -1) {
                        pendingWeaponID = nextWpn;
                        return;
                    }
                    
                    if(weapon.bOwned) {
                        activeWeapon.ChangeOut();
                    }
                    pendingWeaponID = nextWpn;
                    break;
                }
            }
            
            if(--nextWpn < 0) {
                nextWpn = wp_numweapons - 1;
            }
        }
    }
    
    //
    // TurokPlayer::SetDefaultProperties
    //
    
    void SetDefaultProperties(void) {
        kPlayerMove groundMove      = self.GroundMove();
        
        groundMove.accelSpeed       = kVec3(0.25f, 0, 0.09f);
        groundMove.deaccelSpeed     = kVec3(0.5f, 0, 0.5f);
        groundMove.forwardSpeed     = kVec3(384, 0, 384);
        groundMove.backwardSpeed    = kVec3(-384, 0, -292);
        
        kPlayerMove swimMove        = self.SwimMove();
        
        swimMove.accelSpeed         = kVec3(0.05f, 0.01f, 0.05f);
        swimMove.deaccelSpeed       = kVec3(0.05f, 0.01f, 0.05f);
        swimMove.forwardSpeed       = kVec3(246, 340, 246);
        swimMove.backwardSpeed      = kVec3(-154, -340, -154);
        
        self.GroundMove() = groundMove;
        self.SwimMove() = swimMove;
        
        self.Puppet().Physics().mass = PHYSICS_PLAYER_MASS;
        self.Puppet().Physics().stepHeight = PHYSICS_PLAYER_STEPHEIGHT;
    }
    
    //
    // TurokPlayer::ClampAngles
    //
    
    void ClampAngles(kActor @puppet) {
        kAngle angles = puppet.GetAngles();
        float factor = 1.0f;
        
        if(waterLevel >= WLT_BETWEEN) {
            factor = 0.35f;
        }
        
        angles.yaw -= DegToRad(self.cmdMouseX * factor);
        angles.pitch -= DegToRad(self.cmdMouseY * factor);
        
        if(angles.pitch > ANGLE_MAXPITCH) angles.pitch = ANGLE_MAXPITCH;
        if(angles.pitch < -ANGLE_MAXPITCH) angles.pitch = -ANGLE_MAXPITCH;
        
        puppet.SetAngles(angles);
    }
    
    //
    // TurokPlayer::HandleMovement
    //
    
    void HandleMovement(kActor @puppet) {
        kPlayerMove groundMove  = self.GetCurrentMove();
        float deltaTime         = self.deltaTime;
        kAngle angles           = puppet.GetAngles();
        bool bForward           = self.ActionDown("+forward");
        bool bBack              = self.ActionDown("+back");
        bool bLeft              = self.ActionDown("+strafeleft");
        bool bRight             = self.ActionDown("+straferight");
        int wt                  = puppet.Physics().waterLevel;
        
        bClimbing = puppet.Physics().bClimbing;
        
        // climb thrusts
        if(bClimbing) {
            bBack = false;
            bLeft = false;
            bRight = false;
                
            if(bThrusting == false) {
                self.GetAcceleration().Clear();
            }
            
            if(thrustTime <= 0) {
                bClimbDone = false;
                if(bForward) {
                    bThrusting = true;
                    thrustTime = CLIMB_THRUST_TIME;
                    self.GetAcceleration().z = 0;
                    
                    if(bClimbRoll == false) {
                        puppet.StartSound("sounds/shaders/generic_23_turok_climb_1.ksnd");
                        bClimbRoll = true;
                    }
                    else {
                        puppet.StartSound("sounds/shaders/generic_24_turok_climb_2.ksnd");
                        bClimbRoll = false;
                    }
                }
            }
            else {
                float move_z = self.GetAcceleration().z;
                float timeRemain = thrustTime / CLIMB_THRUST_TIME;
                
                bForward = false;
                self.GetAcceleration().z = (Math::Cos((1.0f - timeRemain) * M_PI) - 1.0f) * 0.5f *
                    (move_z - CLIMB_LERP_SPEED) + move_z;
            }
            
            if(thrustTime <= CLIMB_THRUST_THRESHOLD) {
                bThrusting = false;
                bClimbDone = true;
            }
        }
        // swim thrusts
        else if(waterLevel >= WLT_BETWEEN) {
            if(bForward && self.ActionHeldTime("+forward") == 0 && thrustTime <= 0) {
                bThrusting = true;
                thrustTime = SWIM_THRUST_TIME;
                self.GetAcceleration().z = SWIM_THRUST_SPEED;
                
                if(waterLevel == WLT_UNDER) {
                    puppet.StartSound("sounds/shaders/underwater_swim_2.ksnd");
                }
                else if(waterLevel == WLT_BETWEEN) {
                    puppet.StartSound("sounds/shaders/water_splash_2.ksnd");
                }
            }
        }
        
        // ground movement
        if(bThrusting == false) {
            if(bForward || bBack) {
                if(bForward) {
                    groundMove.Accelerate(1, 2, deltaTime);
                }
                if(bBack) {
                    groundMove.Accelerate(-1, 2, deltaTime);
                }
            }
            else {
                groundMove.Accelerate(0, 2, deltaTime);
            }
        
            if(bLeft || bRight) {
                if(bLeft) {
                    groundMove.Accelerate(1, 0, deltaTime);
                }
                if(bRight) {
                    groundMove.Accelerate(-1, 0, deltaTime);
                }
            }
            else {
                groundMove.Accelerate(0, 0, deltaTime);
            }
        }
        // swim movement
        else if(!bClimbing) {
            float az = self.GetAcceleration().z;
            
            self.GetAcceleration().z = (SWIM_THRUST_SPEED - az) * (thrustTime / 4) + az;
            if(thrustTime <= SWIM_THRUST_THRESHOLD) {
                bThrusting = false;
            }
        }
        
        if(thrustTime > 0) {
            thrustTime -= deltaTime;
        }
        
        // handle landing on ground
        kVec3 vel = puppet.Physics().GetVelocity();
        float landImpact = (fallAmount - vel.y) * deltaTime;
        
        if(landImpact <= (FALL_STOPSPEED * deltaTime) && puppet.Physics().OnGround()) {
            self.GetAcceleration().Clear();
            squatTime = SQUAT_LAND_TIME;
            
            if(landImpact <= (FALL_THUMPFACTOR * deltaTime)) {
                puppet.StartSound("sounds/shaders/generic_22_turok_land.ksnd");
            }
        }
        
        // handle transitioning between land and water
        if(waterLevel != wt) {
            // entering water
            if(waterLevel != WLT_UNDER && wt == WLT_UNDER) {
                puppet.StartSound("sounds/shaders/water_splash_1.ksnd");
                bubbleTime = 100;
                bJumped = false;
            }
            
            // exiting water
            if(waterLevel == WLT_UNDER && wt == WLT_BETWEEN) {
                puppet.StartSound("sounds/shaders/generic_16_turok_small_water_gasp.ksnd");
                bLerpToWaterSurface = true;
                bJumped = false;
            }
            
            // handle drifting when impacting into the water
            if(waterLevel <= WLT_OVER && wt > WLT_OVER && vel.y < 0) {
                float speed = self.SwimMove().forwardSpeed.y;
                
                if(speed != 0) {
                    self.GetAcceleration().y = (speed * (vel.y / speed)) * 0.5f;
                    bJumped = false;
                }
            }
        }
        
        // keep track of water surface
        waterLevel = wt;
        
        // directional movement
        if(bFly || puppet.Physics().bInWater) {
            kVec3 forward = angles.ToForwardAxis();
            kVec3 right = angles.ToRightAxis();
            kVec3 accel = self.GetAcceleration();
            
            if(bFly) {
                accel.x *= 4;
                accel.y *= 4;
                accel.z *= 4;
            }
            
            vel.x += (accel.z * forward.x) + (accel.x * right.x);
            vel.y += (accel.z * forward.y) + (accel.x * right.y);
            vel.z += (accel.z * forward.z) + (accel.x * right.z);
            
            // swim vertically when holding the jump button
            if(waterLevel > WLT_OVER && bJumped == false) {
                if(self.ActionDown("+jump")) {
                    groundMove.Accelerate(1, 1, deltaTime);
                }
                else {
                    groundMove.Accelerate(0, 1, deltaTime);
                }

                vel.y += accel.y;
            }
        }
        // xz-axis movement
        else {
            kAngle newAngle(angles.yaw, 0, 0);
            kVec3 forward = newAngle.ToForwardAxis();
            kVec3 right = newAngle.ToRightAxis();
            kVec3 accel = self.GetAcceleration();
            
            vel.x += (accel.z * forward.x) + (accel.x * right.x);
            vel.z += (accel.z * forward.z) + (accel.x * right.z);
        }
        
        if(bJumped == false) {
            // restrict movement while swiming at the surface
            // allow going underwater when looking below 45 degrees
            // ignore if making a hard impact
            if(waterLevel == WLT_BETWEEN) {
                if(angles.pitch < DegToRad(45) && vel.y > -150) {
                    vel.y = 0;
                    self.GetAcceleration().y = 0;
                }
            }
            
            // pull player to surface and lock in place
            if(bLerpToWaterSurface) {
                float oy = puppet.GetOrigin().y;
                float desiredHeight = puppet.Physics().waterHeight -
                    ((puppet.centerHeight + puppet.viewHeight) * 0.5f) + 10.24f;
                
                oy = LocalLerp(oy, desiredHeight, 0.1f);
                vel.y = 0;
                self.GetAcceleration().y = 0;
                
                if(oy >= (desiredHeight-0.1f)) {
                    oy = desiredHeight;
                    bLerpToWaterSurface = false;
                }
                
                puppet.GetOrigin().y = oy;
            }
        }
        
        // update velocity
        puppet.Physics().SetVelocity(vel);
        BobView(puppet);
        
        fallAmount = vel.y;
    }
    
    //
    // TurokPlayer::HandleJumping
    //
    
    void HandleJumping(kActor @puppet) {
        kVec3 vel = puppet.Physics().GetVelocity();
        
        if(puppet.Physics().bInWater) {
            if(bJumped == false && waterLevel == WLT_BETWEEN &&
                self.ActionDown("+jump") && self.ActionHeldTime("+jump") == 0) {
                    vel.y = VELOCITY_JUMP;
                    bJumped = true;
                    bLerpToWaterSurface = false;
                    puppet.StartSound("sounds/shaders/generic_21_turok_jump.ksnd");
            }
            else {
                return;
            }
        }
        else {
            bool bOnGround = puppet.Physics().OnGround();
            
            if(bJumped && bOnGround) {
                bJumped = false;
            }
            
            if(bJumped == false) {
                if(self.ActionDown("+jump") && self.ActionHeldTime("+jump") == 0) {
                    if(bOnGround || (vel.y <= 0 && vel.y > -VELOCITY_JUMP)) {
                        vel.y = VELOCITY_JUMP;
                        bJumped = true;
                        puppet.StartSound("sounds/shaders/generic_21_turok_jump.ksnd");
                    }
                }
                else {
                    return;
                }
            }
        }
        
        puppet.Physics().SetVelocity(vel);
    }
    
    //
    // TurokPlayer::BobView
    //
    
    void BobView(kActor @puppet) {
        float bob_x = 0;
        float bob_y = 0;
        float roll = 0;
        float rollAngle = WALK_STRAFEROLL_ANGLE;
        float rollSpeed = WALK_STRAFEROLL_SPEED;
        
        if(bCameraAttached == false) {
            return;
        }
        
        if(!bClimbing) {
            if(waterLevel >= WLT_BETWEEN) {
                bob_x = Math::Sin(Client.GetTime() * VIEWBOB_SWIMFREQX) * VIEWBOB_SWIMANGLE;
                bob_y = Math::Sin(Client.GetTime() * VIEWBOB_SWIMFREQY) * VIEWBOB_SWIMANGLE;
            }
            else if(puppet.Physics().GroundDistance() <= VIEWBOB_GROUNDHEIGHT) {
                float d = Math::Fabs(self.GetAcceleration().z * self.deltaTime) * 0.06f;
                
                if(d > VIEWBOB_EPISILON) {
                    if(d > VIEWBOB_MAXSWAY) {
                        d = VIEWBOB_MAXSWAY;
                    }
                    
                    bob_x = Math::Sin(Client.GetTime() * VIEWBOB_FREQX) * VIEWBOB_ANGLE * d;
                    bob_y = Math::Sin(Client.GetTime() * VIEWBOB_FREQY) * VIEWBOB_ANGLE * d;
                }
            }
        }
        
        if(bJumped) {
            jumpPitch = LocalLerp(jumpPitch, VIEWBOB_PITCHJUMP, 0.035f);
        }
        else if(jumpPitch > 0.001f) {
            jumpPitch = LocalLerp(jumpPitch, 0, 0.08f);
        }
        else {
            jumpPitch = 0;
        }
        
        if(recoilPitch < -0.001f) {
            recoilPitch = LocalLerp(recoilPitch, 0, 0.08f);
        }
        else {
            recoilPitch = 0;
        }
        
        kCamera @camera = LocalWorld.Camera();
        kAngle angle = camera.GetOffsetAngle();
        
        angle.yaw = -bob_y;
        angle.pitch = bob_x + jumpPitch + recoilPitch;
        
        if(waterLevel >= WLT_BETWEEN) {
            float t = 60.0f * self.deltaTime;
            
            if(t != 0) {
                roll = self.cmdMouseX * 0.05f * 1 / t;
            }
            
            if(roll > SWIM_STRAFEROLL_ANGLE) {
                roll = SWIM_STRAFEROLL_ANGLE;
            }
                
            if(roll < -SWIM_STRAFEROLL_ANGLE) {
                roll = -SWIM_STRAFEROLL_ANGLE;
            }
            
            rollAngle = (SWIM_STRAFEROLL_ANGLE * 0.5f);
            rollSpeed = SWIM_STRAFEROLL_SPEED;
        }
        
        if(self.ActionDown("+strafeleft")) {
            roll += rollAngle;
        }
        else if(self.ActionDown("+straferight")) {
            roll -= rollAngle;
        }
        
        // climb rolls
        if(bClimbing && bThrusting && !bClimbDone) {
            rollSpeed = CLIMB_STRAFEROLL_SPEED;
            if(!bClimbRoll) {
                roll = CLIMB_STRAFEROLL_ANGLE;
            }
            else {
                roll = -CLIMB_STRAFEROLL_ANGLE;
            }
        }
        
        angle.roll = LocalLerp(angle.roll, roll, rollSpeed);
        
        camera.SetOffsetAngle(angle);
        
        if(squatTime > 0.01f) {
            camOffset.y = LocalLerp(camOffset.y, (puppet.viewHeight + 20.48f) * 0.5f, 0.5f);
            
            camera.Attachment().SetAttachOffset(camOffset);
            camera.Attachment().SetSourceOffset(camOffset);
            
            squatTime -= Client.GetRunTime();
        }
        else {
            squatTime = 0;
            
            if(camOffset.y != camHeight) {
                camOffset.y = LocalLerp(camOffset.y, camHeight, 0.125f);
                
                if(camHeight - camOffset.y <= 0.01f) {
                    camOffset.y = camHeight;
                }
                
                camera.Attachment().SetAttachOffset(camOffset);
                camera.Attachment().SetSourceOffset(camOffset);
            }
        }
    }
    
    //
    // TurokPlayer::GiveLifeForce
    //
    
    void GiveLifeForce(int amount) {
        lifeForces += amount;
        if(lifeForces >= TUROK_MAX_LIFEFORCES) {
            self.Puppet().StartSound("sounds/shaders/generic_234.ksnd");
            if(++lives > TUROK_MAX_LIVES) {
                lives = TUROK_MAX_LIVES;
            }
            
            lifeForces -= TUROK_MAX_LIFEFORCES;
            playerHud.livesNum.Update(lives);
        }
        
        playerHud.lifeForceNum.Update(lifeForces);
    }
    
    //
    // TurokPlayer::GiveHealth
    //
    
    bool GiveHealth(int amount, bool bMortalWound) {
        kActor @puppet = self.Puppet();
        
        if(amount <= 0) {
            puppet.health = mortalWound;
            return true;
        }
        
        int max;
        
        if(bMortalWound) {
            max = mortalWound;
        }
        else {
            max = TUROK_HEALTH_MAX;
        }
        
        if(puppet.health >= max) {
            return false;
        }
        
        puppet.health += amount;
        
        if(puppet.health >= max) {
            puppet.health = max;
        }
        
        playerHud.healthNum.Update(puppet.health);
        return true;
    }
    
    //
    // TurokPlayer::GiveMortalWound
    //
    
    void GiveMortalWound(int amount) {
        kActor @puppet = self.Puppet();
        
        mortalWound += amount;
        
        if(mortalWound > TUROK_MORTAL_WOUND_MAX) {
            mortalWound = TUROK_MORTAL_WOUND_MAX;
        }
            
        if(puppet.health < mortalWound) {
            puppet.health = mortalWound;
        }
        
        playerHud.healthNum.Update(puppet.health);
    }
    
    //
    // TurokPlayer::Teleport
    //
    
    void Teleport(TurokAreaTeleport @teleport) {
        kActor @puppet = self.Puppet();
        
        if(LocalWorld.MapID() != teleport.mapID) {
            warpPosition    = teleport.position;
            warpYaw         = teleport.facingYaw;
            warpSectorID    = teleport.sectorNum;
            bWarping        = true;
            
            Game.ClientRequestMapChange(teleport.mapID);
            return;
        }
        
        LocalWorld.TeleportActor(puppet, teleport.position, kAngle(teleport.facingYaw, 0, 0));
        puppet.StartSound("sounds/shaders/warp_inout.ksnd");
    }
    
    //
    // TurokPlayer::OnThink
    //
    
    void OnThink(void) {
    }
    
    //
    // TurokPlayer::OnLocalThink
    //
    
    void OnLocalThink(void) {
        if(Client.GetState() != STATE_INGAME) {
            return;
        }
        
        playerHud.Update();
        
        kActor @puppet = self.Puppet();
        
        ClampAngles(puppet);
        HandleMovement(puppet);
        HandleJumping(puppet);
        
        // random splash/swimming sounds
        if(puppet.Physics().bInWater) {
            if(self.GetAcceleration().Unit() >= 64 && (Client.GetTicks() % 100) == 0) {
                if(waterLevel == WLT_UNDER) {
                    puppet.StartSound("sounds/shaders/underwater_swim_1.ksnd");
                }
                else if(waterLevel == WLT_BETWEEN) {
                    puppet.StartSound("sounds/shaders/water_splash_3.ksnd");
                }
            }
            
            // random bubbles from impacting the water
            if(--bubbleTime > 0) {
                if(waterLevel == WLT_UNDER) {
                    kVec3 spot = puppet.GetOrigin() + kVec3(0, 30.72f, 0);
                    kVec3 offset = kVec3(0, 0, 0);
                    kQuat rot = puppet.GetRotation();
                    
                    LocalWorld.SpawnFX("fx/impact_bubbles.kfx", puppet, offset, spot, rot);
                    LocalWorld.SpawnFX("fx/impact_bubbles.kfx", puppet, offset, spot, rot);
                    LocalWorld.SpawnFX("fx/impact_bubbles.kfx", puppet, offset, spot, rot);
                    LocalWorld.SpawnFX("fx/impact_bubbles.kfx", puppet, offset, spot, rot);
                }
                else {
                    bubbleTime = 0;
                }
            }
        }
        else {
            bubbleTime = 0;
        }
    }
    
    //
    // TurokPlayer::OnSpawn
    //
    
    void OnSpawn(void) {
        kActor @puppet = self.Puppet();
        @localPlayer = this;
        
        ResetVars();
        SetupCamera();
        SetDefaultProperties();
        SetupWeapons();
        
        playerHud.container.bVisible = true;
        
        puppet.bHidden = true;
        puppet.bAllowDamage = true;
        puppet.bCanPickup = true;
        puppet.SetScale(kVec3(0.15f, 0.15f, 0.15f));
        self.Unlock();
        
        waterLevel = puppet.Physics().waterLevel;
        bClimbing = false;
        jumpPitch = 0;
        squatTime = 0;
        
        puppet.health = 100;
        playerHud.healthNum.Update(puppet.health);
        playerHud.livesNum.Update(lives);
        
        // TODO
        kCamera @camera = LocalWorld.Camera();
        
        switch(LocalWorld.MapID()) {
            case 42:
                ToggleCamera();
                self.Lock();
                camera.SetOrigin(kVec3(0, 56.0f, -64.0f));
                camera.SetAngles(kAngle(0, 0, 0));
                break;
            case 44:
                ToggleCamera();
                self.Lock();
                camera.SetOrigin(kVec3(0.0f, -40.96f, -153.6f));
                camera.SetAngles(kAngle(0, 0, 0));
                break;
            default:
                break;
        }
        
        if(bWarping) {
            bWarping = false;
            LocalWorld.TeleportActor(puppet, warpPosition, kAngle(warpYaw, 0, 0), warpSectorID);
            puppet.StartSound("sounds/shaders/warp_inout.ksnd");
            turokGame.FadeFromWhite();
        }
        else {
            turokGame.FadeFromBlack();
        }
    }
    
    //
    // TurokPlayer::OnDamage
    //
    
    void OnDamage(kActor @instigator, int damage, kKeyMapMem @damageDef) {
        kActor @puppet = self.Puppet();
        
        switch((Math::SysRand() % 5) & 3) {
            case 0:
                puppet.StartSound("sounds/shaders/generic_10_turok_injury_1.ksnd");
                break;
            case 1:
                puppet.StartSound("sounds/shaders/generic_11_turok_injury_2.ksnd");
                break;
            case 2:
                puppet.StartSound("sounds/shaders/generic_12_turok_injury_3.ksnd");
                break;
            case 3:
                puppet.StartSound("sounds/shaders/generic_13_turok_injury_4.ksnd");
                break;
        }
        
        playerHud.Flash(192, 0, 0);
        playerHud.healthNum.Update(puppet.health);
    }
    
    //
    // TurokPlayer::OnTouch
    //
    
    bool OnTouch(kActor @instigator) {
        return true;
    }
    
    //
    // TurokPlayer::OnTrigger
    //
    
    void OnTrigger(void) {
    }
};
